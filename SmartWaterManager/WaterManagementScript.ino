#include "arduino_secrets.h"
/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/aff07683-4dde-4e39-8867-292f9fd232e5

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float waterLevel;
  CloudTemperatureSensor temperature;
  CloudRelativeHumidity humidity;
  String isAutomatic;
  bool motorRelay;

  Variables which are marked as READ/WRITE
  in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <DHT.h>
#define DHTPIN 2
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

#include <Wire.h>
#include <LiquidCrystal_I2C.h>
int Contrast=75;int counter = 0;
LiquidCrystal_I2C lcd(0x27, 16, 2);


#define SDA_PIN D6 /* Define the SDA pin here  */
#define SCL_PIN D7 /* Define the SCL Pin here */


int WaterSenserPin = A0;
int MotorRelayPin = D1;


// int[] chill={2,2,2,4,4,4,6,6,6,1,1,1,0,0,0};
void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  pinMode(WaterSenserPin, INPUT);
  pinMode(MotorRelayPin, OUTPUT);
  waterLevel=0;
  temperature=0;
  humidity=0;
  isAutomatic="0";
  motorRelay=false;
  LED_INIT();
  
  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void LED_INIT(){
    // analogWrite(6,Contrast);
    // lcd.begin(16, 2);
    Wire.begin(SDA_PIN, SCL_PIN);  /* Initialize I2C communication */
    lcd.init();                 /* initialize the lcd  */
    lcd.backlight();                  // Turn on the backlight
    lcd.clear();  

    lcd.setCursor(0, 0);
    lcd.print("   Welcome  To  ");
    lcd.setCursor(0, 1);
    lcd.print("    AgVENTURE   ");
    delay(4000);
}

void Display(){
    lcd.clear();
    
    lcd.setCursor(0, 0);
    lcd.print("Motor:");
    lcd.setCursor(6, 0);
    if(motorRelay){
      lcd.print("On  ");
    }else{
      lcd.print("OFF ");
    }

  
    lcd.setCursor(10, 0);
    lcd.print("Lev:");
    lcd.setCursor(14, 0);
    int WL=waterLevel;
    lcd.print(WL);


    lcd.setCursor(0, 1);
    lcd.print("Temp:");
    lcd.setCursor(5, 1);
    int TEMP=temperature;
    lcd.print(TEMP);
    lcd.print("c");


    lcd.setCursor(10, 1);
    lcd.print("H:");
    lcd.setCursor(12, 1);
    int HU= humidity;
    lcd.print(HU);
    lcd.print("%");
}

void ReadingDTHValus(){
    float h = dht.readHumidity();
    float t = dht.readTemperature();
    if(h<0){
      h=0;
    }
    if(h>100){
      h=100;
    }
    if(t<0){
      t=0;
    }
    if(t>100){
      t=100;
    }
    // Your code here
    temperature = t;
    humidity = h;
}

void ReadingWaterLevel(){
    waterLevel = ( 100 - ( (analogRead(WaterSenserPin) / 1023.00) * 100 ) );
    if(waterLevel<=0) waterLevel=0;
    if(waterLevel>=100) waterLevel=99;
}

void MotorControlling(){
  if (isAutomatic=="2") {
      if (waterLevel <= 40) {
        motorRelay = true;
        digitalWrite(MotorRelayPin, LOW);
      } else {
        motorRelay = false;
        digitalWrite(MotorRelayPin, HIGH);
      }
    } else {
      if (!motorRelay) {
        digitalWrite(MotorRelayPin, HIGH);
      } else {
        digitalWrite(MotorRelayPin, LOW);
      }
    }
}

void loop() {
  ArduinoCloud.update();
  
  //reading Temp,Humidity
  ReadingDTHValus();

  //Water Level
  ReadingWaterLevel();

  //Motor controlling
  MotorControlling();

  
  // Serial.print("temperature = ");
  // Serial.println(temperature);

  // Serial.print("humidity = ");
  // Serial.println(humidity);
  
  Display();
}


/*/////////////////////////////////////////////////////////////////////////////////////////////////
  Since Temperature is READ_WRITE variable, onTemperatureChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTemperatureChange()  {
  // Add your code here to act upon Temperature change
}


/*/////////////////////////////////////////////////////////////////////////////////////////////////
  Since Humidity is READ_WRITE variable, onHumidityChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onHumidityChange()  {
  // Add your code here to act upon Humidity change
}


/*/////////////////////////////////////////////////////////////////////////////////////////////////
  Since WaterLevel is READ_WRITE variable, onWaterLevelChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onWaterLevelChange()  {
  // Add your code here to act upon WaterLevel change
}


/*/////////////////////////////////////////////////////////////////////////////////////////////////
  Since MotorRelay is READ_WRITE variable, onMotorRelayChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMotorRelayChange()  {
  if(motorRelay){
    isAutomatic = "1";
  }else{
    isAutomatic = "0";
  }
  // Add your code here to act upon MotorRelay change
}


/*/////////////////////////////////////////////////////////////////////////////////////////////////
  Since IsAutomatic is READ_WRITE variable, onIsAutomaticChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onIsAutomaticChange()  {
  if(isAutomatic=="0"){
    motorRelay=false;
  }else if(isAutomatic=="1"){
    motorRelay=true;
  }
  // Add your code here to act upon IsAutomatic change
}